name: 06 - Contexts
run-name: 06 - Contexts | DEBUG - ${{ inputs.debug }}

on:
  workflow_dispatch:
    inputs:
      debug:
        type: boolean
        default: false

env:
  MY_WORKFLOW_VAR: 'workflow'
  MY_OVERWRITTEN_VAR: 'workflow'

jobs:
  echo-data:
    runs-on: ubuntu-latest
    env:
      MY_JOB_VAR: 'job'
      MY_OVERWRITTEN_VAR: 'job'
    steps:
      - name: Display information
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run number: ${{ github.run_number }}"
      # MY_TEST_VAR is a custom variable, which we can set at the repository level.
      # On GitHub, go to the repository's Settings > Secrets and variables
      # > Actions > Variables. Add a new variable with the name MY_TEST_VAR.
      # Variables can also be set at the organization level.
      - name: Retrieve variable
        run: |
          echo "Variable value: ${{ vars.MY_TEST_VAR }}"
      - name: Print env variables (with step-scoped overrides)
        env:
          MY_OVERWRITTEN_VAR: 'step'
        run: |
          echo "Workflow env: ${{ env.MY_WORKFLOW_VAR }}"
          echo "Overwritten env: ${{ env.MY_OVERWRITTEN_VAR }}"
      - name: Print env variables (without step-scoped overrides)
        run: |
          echo "Workflow env: ${{ env.MY_WORKFLOW_VAR }}"
          echo "Overwritten env: ${{ env.MY_OVERWRITTEN_VAR }}"
  # Alternative syntax: environment variables can also be written using
  # traditional Bash environment variable syntax.
  echo-data2:
    runs-on: ubuntu-latest
    steps:
      - name: Print env variables
        run: |
          echo "Workflow env: $MY_WORKFLOW_VAR"
          echo "Overwritten env: $MY_OVERWRITTEN_VAR"
